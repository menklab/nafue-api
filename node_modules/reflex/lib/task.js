'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Task = exports.Task = function () {
  _createClass(Task, null, [{
    key: 'create',
    value: function create(execute) {
      return new Task(execute);
    }
  }, {
    key: 'future',
    value: function future(request) {
      console.warn('Task.future is deprecated API use Task.create instead');
      return new Future(request);
    }
  }, {
    key: 'succeed',
    value: function succeed(value) {
      return new Succeed(value);
    }
  }, {
    key: 'fail',
    value: function fail(error) {
      return new Fail(error);
    }
  }, {
    key: 'spawn',
    value: function spawn(task) {
      return new Spawn(task);
    }
  }, {
    key: 'sleep',
    value: function sleep(time) {
      return new Sleep(time);
    }
  }, {
    key: 'send',
    value: function send(address, message) {
      return new Send(address, message);
    }
  }, {
    key: 'fork',
    value: function fork(task, onSucceed, onFail) {
      run(new Running(task), onSucceed, onFail);
    }
  }]);

  function Task(execute) {
    _classCallCheck(this, Task);

    this.execute = execute;
  }

  _createClass(Task, [{
    key: 'chain',
    value: function chain(next) {
      return new Chain(this, next);
    }
  }, {
    key: 'map',
    value: function map(f) {
      return new Map(this, f);
    }
  }, {
    key: 'capture',
    value: function capture(handle) {
      return new Capture(this, handle);
    }
  }, {
    key: 'format',
    value: function format(f) {
      return new Format(this, f);
    }
  }, {
    key: 'fork',
    value: function fork(succeed, fail) {
      this.execute(succeed, fail);
    }
  }]);

  return Task;
}();

var Succeed = function (_Task) {
  _inherits(Succeed, _Task);

  function Succeed(value) {
    _classCallCheck(this, Succeed);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Succeed).call(this, Succeed.prototype.fork));

    _this.value = value;
    return _this;
  }

  _createClass(Succeed, [{
    key: 'fork',
    value: function fork(succeed, fail) {
      succeed(this.value);
    }
  }]);

  return Succeed;
}(Task);

var Fail = function (_Task2) {
  _inherits(Fail, _Task2);

  function Fail(error) {
    _classCallCheck(this, Fail);

    var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(Fail).call(this, Fail.prototype.fork));

    _this2.error = error;
    return _this2;
  }

  _createClass(Fail, [{
    key: 'fork',
    value: function fork(succeed, fail) {
      fail(this.error);
    }
  }]);

  return Fail;
}(Task);

var Sleep = function (_Task3) {
  _inherits(Sleep, _Task3);

  function Sleep(time) {
    _classCallCheck(this, Sleep);

    var _this3 = _possibleConstructorReturn(this, Object.getPrototypeOf(Sleep).call(this, Sleep.prototype.fork));

    _this3.time = time;
    return _this3;
  }

  _createClass(Sleep, [{
    key: 'fork',
    value: function fork(succeed, fail) {
      setTimeout(succeed, this.time, void 0);
    }
  }]);

  return Sleep;
}(Task);

var threadID = 0;

var Spawn = function (_Task4) {
  _inherits(Spawn, _Task4);

  function Spawn(task) {
    _classCallCheck(this, Spawn);

    var _this4 = _possibleConstructorReturn(this, Object.getPrototypeOf(Spawn).call(this, Spawn.prototype.fork));

    _this4.task = task;
    return _this4;
  }

  _createClass(Spawn, [{
    key: 'fork',
    value: function fork(succeed, fail) {
      var _this5 = this;

      Promise.resolve(null).then(function (_) {
        return Task.fork(_this5.task, noop, noop);
      });

      succeed(++threadID);
    }
  }]);

  return Spawn;
}(Task);

var Send = function (_Task5) {
  _inherits(Send, _Task5);

  function Send(address, message) {
    _classCallCheck(this, Send);

    var _this6 = _possibleConstructorReturn(this, Object.getPrototypeOf(Send).call(this, Send.prototype.fork));

    _this6.message = message;
    _this6.address = address;
    return _this6;
  }

  _createClass(Send, [{
    key: 'fork',
    value: function fork(succeed, fail) {
      succeed(void this.address(this.message));
    }
  }]);

  return Send;
}(Task);

var Future = function (_Task6) {
  _inherits(Future, _Task6);

  function Future(request) {
    _classCallCheck(this, Future);

    var _this7 = _possibleConstructorReturn(this, Object.getPrototypeOf(Future).call(this, Future.prototype.fork));

    _this7.request = request;
    return _this7;
  }

  _createClass(Future, [{
    key: 'fork',
    value: function fork(succeed, fail) {
      this.request().then(succeed, fail);
    }
  }]);

  return Future;
}(Task);

var Chain = function (_Task7) {
  _inherits(Chain, _Task7);

  function Chain(task, next) {
    _classCallCheck(this, Chain);

    var _this8 = _possibleConstructorReturn(this, Object.getPrototypeOf(Chain).call(this, Chain.prototype.fork));

    _this8.task = task;
    _this8.next = next;
    return _this8;
  }

  _createClass(Chain, [{
    key: 'fork',
    value: function fork(succeed, fail) {
      var _this9 = this;

      this.task.fork(function (value) {
        return _this9.next(value).fork(succeed, fail);
      }, fail);
    }
  }]);

  return Chain;
}(Task);

var Map = function (_Task8) {
  _inherits(Map, _Task8);

  function Map(task, f) {
    _classCallCheck(this, Map);

    var _this10 = _possibleConstructorReturn(this, Object.getPrototypeOf(Map).call(this, Map.prototype.fork));

    _this10.task = task;
    _this10.f = f;
    return _this10;
  }

  _createClass(Map, [{
    key: 'fork',
    value: function fork(succeed, fail) {
      var _this11 = this;

      this.task.fork(function (value) {
        return succeed(_this11.f(value));
      }, fail);
    }
  }]);

  return Map;
}(Task);

var Capture = function (_Task9) {
  _inherits(Capture, _Task9);

  function Capture(task, handle) {
    _classCallCheck(this, Capture);

    var _this12 = _possibleConstructorReturn(this, Object.getPrototypeOf(Capture).call(this, Capture.prototype.fork));

    _this12.task = task;
    _this12.handle = handle;
    return _this12;
  }

  _createClass(Capture, [{
    key: 'fork',
    value: function fork(succeed, fail) {
      var _this13 = this;

      this.task.fork(succeed, function (error) {
        return _this13.handle(error).fork(succeed, fail);
      });
    }
  }]);

  return Capture;
}(Task);

var Format = function (_Task10) {
  _inherits(Format, _Task10);

  function Format(task, f) {
    _classCallCheck(this, Format);

    var _this14 = _possibleConstructorReturn(this, Object.getPrototypeOf(Format).call(this, Format.prototype.fork));

    _this14.task = task;
    _this14.f = f;
    return _this14;
  }

  _createClass(Format, [{
    key: 'fork',
    value: function fork(succeed, fail) {
      var _this15 = this;

      this.task.fork(succeed, function (error) {
        return fail(_this15.f(error));
      });
    }
  }]);

  return Format;
}(Task);

var Deferred = function (_Task11) {
  _inherits(Deferred, _Task11);

  function Deferred() {
    _classCallCheck(this, Deferred);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(Deferred).call(this, Deferred.prototype.fork));
  }

  _createClass(Deferred, [{
    key: 'resume',
    value: function resume(task) {
      if (this.result != null) {
        throw Error('Deferred task can only be resumed once');
      }
      this.result = task;
    }
  }, {
    key: 'fork',
    value: function fork(succeed, fail) {
      throw Error('Forking defferred task is not allowed');
    }
  }]);

  return Deferred;
}(Task);

var noop = function noop() {
  return void 0;
};

var Running = function Running(task) {
  _classCallCheck(this, Running);

  this.task = task;
};

var Done = function Done(task) {
  _classCallCheck(this, Done);

  this.task = task;
};

var Blocked = function Blocked(task) {
  _classCallCheck(this, Blocked);

  this.task = task;
};

var run = function run(root, succeed, fail) {
  var routine = new Running(root.task);
  while (routine instanceof Running) {
    routine = step(root, routine.task, succeed, fail);
  }

  if (routine instanceof Blocked) {
    root.task = routine.task;
  }

  if (routine instanceof Done) {
    var task = routine.task;
    if (task instanceof Succeed) {
      succeed(task.value);
    } else if (task instanceof Fail) {
      fail(task.error);
    } else {
      throw Error('Task end up in an invalid state');
    }
  }
};

var step = function step(root, task, succeed, fail) {
  if (task instanceof Succeed) {
    return new Done(task);
  } else if (task instanceof Fail) {
    return new Done(task);
  } else if (task instanceof Deferred) {
    if (task.result != null) {
      return new Running(task.result);
    } else {
      throw new Error('Blocked routine should not be resumed until blocking task is complete');
    }
  } else if (task instanceof Chain || task instanceof Map || task instanceof Capture || task instanceof Format) {
    var routine = new Running(task.task);
    while (routine instanceof Running) {
      routine = step(root, routine.task, succeed, fail);
    }

    if (routine instanceof Done) {
      var active = routine.task;

      if (active instanceof Succeed) {
        if (task instanceof Chain) {
          return new Running(task.next(active.value));
        } else if (task instanceof Map) {
          return new Done(new Succeed(task.f(active.value)));
        } else {
          return routine;
        }
      } else if (active instanceof Fail) {
        if (task instanceof Capture) {
          return new Running(task.handle(active.error));
        } else if (task instanceof Format) {
          return new Done(new Fail(task.f(active.error)));
        } else {
          return routine;
        }
      } else {
        return routine;
      }
    } else if (routine instanceof Blocked) {
      if (task instanceof Chain) {
        return new Blocked(new Chain(routine.task, task.next));
      } else if (task instanceof Capture) {
        return new Blocked(new Capture(routine.task, task.handle));
      } else if (task instanceof Map) {
        return new Blocked(new Map(routine.task, task.f));
      } else if (task instanceof Format) {
        return new Blocked(new Format(routine.task, task.f));
      } else {
        return routine;
      }
    } else {
      return routine;
    }
  } else {
    var _ret = function () {
      var isBlocked = false;
      var isResumed = false;
      var deferred = new Deferred();

      task.fork(function (value) {
        if (!isResumed) {
          isResumed = true;
          deferred.resume(new Succeed(value));
          if (isBlocked) {
            run(root, succeed, fail);
          }
        }
      }, function (error) {
        if (!isResumed) {
          isResumed = true;
          deferred.resume(new Fail(error));
          if (isBlocked) {
            run(root, succeed, fail);
          }
        }
      });

      isBlocked = !isResumed;

      var routine = deferred.result != null ? new Running(deferred.result) : new Blocked(deferred);

      return {
        v: routine
      };
    }();

    if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
  }
};
//# sourceMappingURL=data:application/json;base64,