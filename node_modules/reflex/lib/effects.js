"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Effects = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _task2 = require("./task");

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var raise = function raise(error) {
  throw Error("Effects should be created from task that never fail but it did fail with error " + error);
};

var ignore = function ignore(_) {
  return void 0;
};

var nil = _task2.Task.succeed(void 0);

var never = new _task2.Task(function (succeed, fail) {
  return void 0;
});

var Effects = function () {
  _createClass(Effects, null, [{
    key: "task",
    value: function task(_task) {
      return new Effects(_task);
    }
  }, {
    key: "tick",
    value: function tick(tag) {
      return new Tick(tag);
    }
  }, {
    key: "receive",
    value: function receive(action) {
      var fx = new Effects(new _task2.Task(function (succeed, fail) {
        return void Promise.resolve(action).then(succeed, fail);
      }));
      return fx;
    }
  }, {
    key: "batch",
    value: function batch(effects) {
      return new Batch(effects);
    }
  }, {
    key: "driver",
    value: function driver(address) {
      return function (fx) {
        if (!(fx instanceof None)) {
          _task2.Task.fork(fx.send(address), ignore, raise);
        }
      };
    }
  }]);

  function Effects(task) {
    _classCallCheck(this, Effects);

    this.task = task;
  }

  _createClass(Effects, [{
    key: "map",
    value: function map(f) {
      return new Effects(this.task.map(f));
    }
  }, {
    key: "send",
    value: function send(address) {
      return this.task.chain(function (value) {
        return _task2.Task.send(address, value);
      });
    }
  }]);

  return Effects;
}();

exports.Effects = Effects;

var None = function (_Effects) {
  _inherits(None, _Effects);

  function None() {
    _classCallCheck(this, None);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(None).call(this, never));
  }

  _createClass(None, [{
    key: "map",
    value: function map(f) {
      return Effects.none;
    }
  }, {
    key: "send",
    value: function send(address) {
      return nil;
    }
  }]);

  return None;
}(Effects);

Effects.none = new None();

var Batch = function (_Effects2) {
  _inherits(Batch, _Effects2);

  function Batch(effects) {
    _classCallCheck(this, Batch);

    var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(Batch).call(this, never));

    _this2.effects = effects;
    return _this2;
  }

  _createClass(Batch, [{
    key: "map",
    value: function map(f) {
      return new Batch(this.effects.map(function (effect) {
        return effect.map(f);
      }));
    }
  }, {
    key: "send",
    value: function send(address) {
      var _this3 = this;

      return new _task2.Task(function (succeed, fail) {
        var effects = _this3.effects;

        var count = effects.length;
        var index = 0;
        while (index < count) {
          var effect = effects[index];
          if (!(effect instanceof None)) {
            _task2.Task.fork(effect.send(address), ignore, raise);
          }

          index = index + 1;
        }
        succeed(void 0);
      });
    }
  }]);

  return Batch;
}(Effects);

var Tick = function (_Effects3) {
  _inherits(Tick, _Effects3);

  function Tick(tag) {
    _classCallCheck(this, Tick);

    var _this4 = _possibleConstructorReturn(this, Object.getPrototypeOf(Tick).call(this, never));

    _this4.tag = tag;
    return _this4;
  }

  _createClass(Tick, [{
    key: "map",
    value: function map(f) {
      var _this5 = this;

      return new Tick(function (time) {
        return f(_this5.tag(time));
      });
    }
  }, {
    key: "send",
    value: function send(address) {
      var _this6 = this;

      var task = new _task2.Task(function (succeed, fail) {
        return animationScheduler.schedule(function (time) {
          return succeed(_this6.tag(time));
        });
      }).chain(function (action) {
        return _task2.Task.send(address, action);
      });
      return task;
    }
  }]);

  return Tick;
}(Effects);

var NO_REQUEST = 0;
var PENDING_REQUEST = 1;
var EXTRA_REQUEST = 2;

var AnimationScheduler = function () {
  function AnimationScheduler() {
    _classCallCheck(this, AnimationScheduler);

    this.state = NO_REQUEST;
    this.requests = [];
    this.execute = this.execute.bind(this);
  }

  _createClass(AnimationScheduler, [{
    key: "schedule",
    value: function schedule(request) {
      if (this.state === NO_REQUEST) {
        window.requestAnimationFrame(this.execute);
      }

      this.requests.push(request);
      this.state = PENDING_REQUEST;
    }
  }, {
    key: "execute",
    value: function execute(time) {
      switch (this.state) {
        case NO_REQUEST:
          throw Error("Unexpected frame request");
        case PENDING_REQUEST:
          window.requestAnimationFrame(this.execute);
          this.state = EXTRA_REQUEST;
          this.dispatch(this.requests.splice(0), 0, time);
          break;
        case EXTRA_REQUEST:
          this.state = NO_REQUEST;
          break;
      }
    }
  }, {
    key: "dispatch",
    value: function dispatch(requests, index, time) {
      var count = requests.length;
      try {
        while (index < count) {
          var request = requests[index];
          index = index + 1;
          request(time);
        }
      } finally {
        if (index < count) {
          this.dispatch(requests, index, time);
        }
      }
    }
  }]);

  return AnimationScheduler;
}();

var animationScheduler = new AnimationScheduler();
//# sourceMappingURL=data:application/json;base64,