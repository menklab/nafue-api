/* @flow */

import type {Address} from "./signal"
import type {Task} from "./task"

export type Time = number

export type Never = Never

declare export class Effects <a>
  { static none: Effects<any>
  , static task <a> (task:Task<Never, a>):Effects<a>
  , static tick <a> (tag:(time:Time) => a):Effects<a>
  , static receive <a> (action:a):Effects<a>
  , static batch <a> (effecs:Array<Effects<a>>):Effects<a>
  , static driver <a> (address:Address<a>):(fx:Effects<a>) => void

  , constructor(task:Task<Never, a>):void
  , map <b> (f:(input:a) => b): Effects<b>
  , send (address:Address<a>): Task<Never, void>
  }
